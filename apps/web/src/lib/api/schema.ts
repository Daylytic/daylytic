/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/oauth2/google": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Creates an account with session in the db, and returns user object. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["def-0"]["LoadUserInputSchema"];
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["def-0"]["UserSchema"];
                    };
                };
            };
        };
        /** @description Logs out session assosiated with the bearer */
        delete: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Succesfully logged out from the account */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth2/timezone/{timeZone}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Updates current timezone for user */
        patch: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path: {
                    timeZone: components["schemas"]["def-0"]["UserSchema"]["timeZone"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["def-0"]["UserSchema"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/oauth2/theme/{theme}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Updates current theme for user */
        patch: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path: {
                    theme: components["schemas"]["def-0"]["UserSchema"]["theme"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["def-0"]["UserSchema"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/oauth2/notification/subscribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Subscribe user to notifications */
        post: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["def-0"]["CreateNotificationSubscriptionInputSchema"];
                };
            };
            responses: {
                /** @description Succesfully subscribed to notifications */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timelytic/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetches timelytic from specific user */
        get: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["def-5"]["TimelyticSchema"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timelytic/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Resets the timelytic data */
        put: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["def-5"]["ResetTimelyticInputSchema"];
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["def-5"]["TimelyticSchema"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timelytic/pause": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Pauses the timelytic timer */
        put: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["def-5"]["TimelyticWithTimeInputSchema"];
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["def-5"]["TimelyticSchema"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timelytic/end": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Ends timelytic timer */
        put: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["def-5"]["TimelyticWithTimeInputSchema"];
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["def-5"]["TimelyticSchema"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/timelytic/continue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Updates the data of timelytic object */
        put: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["def-5"]["TimelyticWithTimeInputSchema"];
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["def-5"]["TimelyticSchema"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/analytics/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetches given user tasks */
        get: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["def-6"]["AnalyticsSchema"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/goal/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch goals */
        get: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["def-3"]["FetchGoalsResponseSchema"];
                    };
                };
            };
        };
        /** @description Update goal */
        put: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["def-3"]["UpdateGoalSchema"];
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["def-3"]["GoalSchema"];
                    };
                };
            };
        };
        /** @description Create goal */
        post: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["def-3"]["CreateGoalInputSchema"];
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["def-3"]["GoalSchema"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/goal/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch goals, with projects, and tasks */
        get: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["def-3"]["FetchAllResponseSchema"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/goal/{goalId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete a specific goal */
        delete: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path: {
                    goalId: components["schemas"]["def-3"]["GoalSchema"]["id"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Succesfully deleted goal */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/goal/{goalId}/project": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch projects */
        get: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path: {
                    goalId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["def-4"]["ProjectSchema"][];
                    };
                };
            };
        };
        put?: never;
        /** @description Create project */
        post: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path: {
                    goalId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["def-4"]["CreateProjectInputSchema"];
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["def-4"]["ProjectSchema"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/goal/{goalId}/project/{projectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete a specific project */
        delete: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path: {
                    goalId: components["schemas"]["def-4"]["ProjectSchema"]["id"];
                    projectId: components["schemas"]["def-4"]["ProjectSchema"]["id"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Succesfully deleted project */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/goal/project": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update project */
        put: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["def-4"]["UpdateProjectsSchema"];
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["def-4"]["ProjectSchema"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/assistance/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch users assistances */
        get: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["def-7"]["FetchAssistancesResponseSchema"];
                    };
                };
            };
        };
        put?: never;
        /** @description Create assistance */
        post: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["def-7"]["QuestionResponsesSchema"];
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["def-7"]["AssistanceSchema"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/task/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch all the existing tasks */
        get: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["def-1"]["FetchTasksResponseSchema"];
                    };
                };
            };
        };
        /** @description Update project */
        put: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["def-1"]["UpdateTasksInputSchema"];
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["def-1"]["TaskSchema"];
                    };
                };
            };
        };
        /** @description Create task */
        post: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["def-1"]["CreateTaskWithIdsSchema"];
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["def-1"]["TaskSchema"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/task/routine": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch all routine tasks */
        get: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["def-1"]["FetchTasksResponseSchema"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/task/{taskId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete a specific project */
        delete: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path: {
                    taskId: components["schemas"]["def-1"]["TaskSchema"]["id"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Succesfully deleted project */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tag/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch all tags from the user */
        get: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["def-2"]["FetchTagsResponseSchema"];
                    };
                };
            };
        };
        /** @description Update tag */
        put: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["def-2"]["UpdateTagInputSchema"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** @description Create new tag */
        post: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["def-2"]["CreateTagInputSchema"];
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["def-2"]["TagSchema"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tag/{tagId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete tag */
        delete: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path: {
                    tagId: components["schemas"]["def-2"]["TagSchema"]["id"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stats/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch statistics from Daylytic platform */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["def-8"]["StatsSchema"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contact/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Fetch statistics from Daylytic platform */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["def-9"]["ContactInputSchema"];
                };
            };
            responses: {
                /** @description Sent email successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** UsersSchema */
        "def-0": {
            UserSchema: {
                id: string;
                googleId: string;
                name: string;
                email: string;
                picture: string;
                /** Format: date-time */
                createdAt: string;
                /** Format: date-time */
                lastSeenAt: string;
                timeZone: string;
                theme: string;
            };
            CreateUserInputSchema: {
                token: string;
                timeZone: components["schemas"]["def-0"]["UserSchema"]["timeZone"];
                theme: components["schemas"]["def-0"]["UserSchema"]["theme"];
            };
            GoogleAccountSchema: {
                id: string;
                /** Format: email */
                email: string;
                name: string;
                picture: string;
                timeZone: components["schemas"]["def-0"]["UserSchema"]["timeZone"];
                theme: components["schemas"]["def-0"]["UserSchema"]["theme"];
            };
            HeaderBearerSchema: {
                authorization: string;
            };
            LoadUserInputSchema: {
                token: string;
                timeZone: components["schemas"]["def-0"]["UserSchema"]["timeZone"];
                theme: components["schemas"]["def-0"]["UserSchema"]["theme"];
            };
            UpdateTimezoneInputSchema: {
                timeZone: components["schemas"]["def-0"]["UserSchema"]["timeZone"];
            };
            UpdateThemeInputSchema: {
                theme: components["schemas"]["def-0"]["UserSchema"]["theme"];
            };
            CreateNotificationSubscriptionInputSchema: {
                endpoint: string;
                keys: {
                    p256dh: string;
                    auth: string;
                };
            };
        };
        /** TaskSchemas */
        "def-1": {
            TaskSchema: {
                id: string;
                position: number;
                /** @enum {string} */
                taskType: "ROUTINE" | "PROJECT" | "EVENT";
                priority: ("LOW" | "MEDIUM" | "HIGH" | "CRITICAL" | "OPTIONAL") | null;
                title: string;
                content: number | string | boolean | unknown[] | {
                    [key: string]: unknown;
                };
                /** @default false */
                isCompleted: boolean;
                /** @default false */
                timelyticTask: boolean;
                /** Format: date-time */
                createdAt: string;
                /** Format: date-time */
                updatedAt: string;
                completedAt: string | null;
                deadline: string | null;
                projectId: components["schemas"]["def-1"]["TaskSchema"]["id"] | null;
                userId: components["schemas"]["def-1"]["TaskSchema"]["id"] | null;
                tagIds: components["schemas"]["def-1"]["TaskSchema"]["id"][];
            };
            CreateTaskInputSchema: {
                title: components["schemas"]["def-1"]["TaskSchema"]["title"];
                taskType: components["schemas"]["def-1"]["TaskSchema"]["taskType"];
            };
            CreateTaskWithIdsSchema: {
                title: components["schemas"]["def-1"]["TaskSchema"]["title"];
                taskType: components["schemas"]["def-1"]["TaskSchema"]["taskType"];
                userId?: components["schemas"]["def-1"]["TaskSchema"]["id"];
                projectId?: components["schemas"]["def-1"]["TaskSchema"]["id"];
            };
            FetchTasksResponseSchema: components["schemas"]["def-1"]["TaskSchema"][];
            DeleteTaskInputSchema: {
                id: components["schemas"]["def-1"]["TaskSchema"]["id"];
            };
            UpdateTasksInputSchema: components["schemas"]["def-1"]["TaskSchema"][];
            UpdateTasksResponseSchema: components["schemas"]["def-1"]["TaskSchema"][];
            DeleteTaskParamsInputSchema: {
                taskId: components["schemas"]["def-1"]["TaskSchema"]["id"];
            };
        };
        /** TagSchemas */
        "def-2": {
            TagSchema: {
                id: string;
                name: string;
                color: string;
                userId: components["schemas"]["def-2"]["TagSchema"]["id"] | null;
                taskIds: components["schemas"]["def-2"]["TagSchema"]["id"][];
            };
            CreateTagInputSchema: {
                name: components["schemas"]["def-2"]["TagSchema"]["name"];
                color: components["schemas"]["def-2"]["TagSchema"]["color"];
            };
            DeleteTagInputSchema: {
                tagId: components["schemas"]["def-2"]["TagSchema"]["id"];
            };
            FetchTagsResponseSchema: components["schemas"]["def-2"]["TagSchema"][];
            UpdateTagSchema: {
                id: components["schemas"]["def-2"]["TagSchema"]["id"];
                name: components["schemas"]["def-2"]["TagSchema"]["name"];
                color: components["schemas"]["def-2"]["TagSchema"]["color"];
                userId: components["schemas"]["def-2"]["TagSchema"]["userId"];
            };
            UpdateTagInputSchema: {
                color: components["schemas"]["def-2"]["TagSchema"]["color"];
                name: components["schemas"]["def-2"]["TagSchema"]["name"];
                id: components["schemas"]["def-2"]["TagSchema"]["id"];
            };
        };
        /** GoalSchemas */
        "def-3": {
            GoalSchema: {
                id: string;
                title: string;
                description: string;
                userId: components["schemas"]["def-3"]["GoalSchema"]["id"];
                archived: boolean;
            };
            CreateGoalInputSchema: {
                title: components["schemas"]["def-3"]["GoalSchema"]["title"];
                description: components["schemas"]["def-3"]["GoalSchema"]["description"];
            };
            DeleteGoalInputSchema: {
                goalId: components["schemas"]["def-3"]["GoalSchema"]["id"];
            };
            UpdateGoalSchema: {
                id: components["schemas"]["def-3"]["GoalSchema"]["id"];
                title: components["schemas"]["def-3"]["GoalSchema"]["title"];
                description: components["schemas"]["def-3"]["GoalSchema"]["description"];
                archived: components["schemas"]["def-3"]["GoalSchema"]["archived"];
            };
            FetchGoalsResponseSchema: components["schemas"]["def-3"]["GoalSchema"][];
            FetchAllResponseSchema: {
                id: components["schemas"]["def-3"]["GoalSchema"]["id"];
                title: components["schemas"]["def-3"]["GoalSchema"]["title"];
                description: components["schemas"]["def-3"]["GoalSchema"]["description"];
                userId: components["schemas"]["def-3"]["GoalSchema"]["id"];
                archived: components["schemas"]["def-3"]["GoalSchema"]["archived"];
                projects: {
                    id: components["schemas"]["def-3"]["GoalSchema"]["id"];
                    position: number;
                    title: string;
                    goalId: components["schemas"]["def-3"]["GoalSchema"]["id"];
                    archived: boolean;
                    tasks: {
                        id: components["schemas"]["def-3"]["GoalSchema"]["id"];
                        position: number;
                        /** @enum {string} */
                        taskType: "ROUTINE" | "PROJECT" | "EVENT";
                        priority: ("LOW" | "MEDIUM" | "HIGH" | "CRITICAL" | "OPTIONAL") | null;
                        title: string;
                        content: number | string | boolean | unknown[] | {
                            [key: string]: unknown;
                        };
                        /** @default false */
                        isCompleted: boolean;
                        /** @default false */
                        timelyticTask: boolean;
                        /** Format: date-time */
                        createdAt: string;
                        /** Format: date-time */
                        updatedAt: string;
                        completedAt: string | null;
                        deadline: string | null;
                        projectId: components["schemas"]["def-3"]["GoalSchema"]["id"] | null;
                        userId: components["schemas"]["def-3"]["GoalSchema"]["id"] | null;
                        tagIds: components["schemas"]["def-3"]["GoalSchema"]["id"][];
                    }[];
                }[];
            }[];
        };
        /** ProjectSchemas */
        "def-4": {
            ProjectSchema: {
                id: string;
                position: number;
                title: string;
                goalId: components["schemas"]["def-4"]["ProjectSchema"]["id"];
                archived: boolean;
            };
            CreateProjectInputSchema: {
                title: components["schemas"]["def-4"]["ProjectSchema"]["title"];
            };
            DeleteProjectParamsInputSchema: {
                goalId: components["schemas"]["def-4"]["ProjectSchema"]["id"];
                projectId: components["schemas"]["def-4"]["ProjectSchema"]["id"];
            };
            UpdateProjectsSchema: components["schemas"]["def-4"]["ProjectSchema"][];
        };
        /** TimelyticSchemas */
        "def-5": {
            TimelyticSchema: {
                id: string;
                userId: components["schemas"]["def-5"]["TimelyticSchema"]["id"];
                deadline: string | null;
                duration: (1800000 | 2700000 | 3600000) | null;
                pausedTime: string | null;
                /** @default false */
                isRunning: boolean;
            };
            UpdateTimelyticInputSchema: components["schemas"]["def-5"]["TimelyticSchema"];
            ResetTimelyticInputSchema: {
                duration: components["schemas"]["def-5"]["TimelyticSchema"]["duration"];
                time: string;
            };
            TimelyticWithTimeInputSchema: {
                time: components["schemas"]["def-5"]["ResetTimelyticInputSchema"]["time"];
            };
        };
        /** AnalyticsSchemas */
        "def-6": {
            AnalyticsSchema: {
                id: string;
                userId: components["schemas"]["def-6"]["AnalyticsSchema"]["id"];
                /** Format: date-time */
                lastRoutineReset: string;
                loginStreak: number;
                recordLoginStreak: components["schemas"]["def-6"]["AnalyticsSchema"]["loginStreak"];
                routineStreak: components["schemas"]["def-6"]["AnalyticsSchema"]["loginStreak"];
                recordRoutineStreak: components["schemas"]["def-6"]["AnalyticsSchema"]["loginStreak"];
                timelyticTasksFinished: components["schemas"]["def-6"]["AnalyticsSchema"]["loginStreak"];
                timelyticTimeSpent: components["schemas"]["def-6"]["AnalyticsSchema"]["loginStreak"];
                timelyticSessions: components["schemas"]["def-6"]["AnalyticsSchema"]["loginStreak"];
            };
        };
        /** AssistanceSchemas */
        "def-7": {
            AssistanceSchema: {
                id: string;
                userId: components["schemas"]["def-7"]["AssistanceSchema"]["id"];
                response: null | string;
                questions: {
                    [key: string]: string | number;
                };
                /** Format: date-time */
                createdAt: string;
            };
            FetchAssistancesResponseSchema: components["schemas"]["def-7"]["AssistanceSchema"][];
            CreateAssistanceInputSchema: {
                questions: components["schemas"]["def-7"]["AssistanceSchema"]["questions"];
            };
            QuestionResponsesSchema: components["schemas"]["def-7"]["AssistanceSchema"]["questions"];
        };
        /** StatsSchemas */
        "def-8": {
            StatsSchema: {
                reachedGoals: number;
                completedTasks: number;
                completedProjects: number;
            };
        };
        /** ContactSchema */
        "def-9": {
            ContactInputSchema: {
                name: string;
                /** Format: email */
                email: string;
                message: string;
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
