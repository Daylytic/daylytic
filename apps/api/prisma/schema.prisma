// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @unique @default(cuid()) // Unique ID for the user
  email      String     @unique // Email must be unique
  name       String
  picture    String
  createdAt  DateTime   @default(now()) // Timestamp of account creation
  lastSeenAt DateTime   @default(now()) // Last login time
  timeZone   String
  goals      Goal[] // One user can have multiple goals
  sessions   Session[]
  dailyTasks Task[]
  analytics  Analytics?
}

model Analytics {
  id          String       @id @default(cuid()) // Unique ID for the goal
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @unique
  routineData RoutineData? @relation // Optional RoutineData link
}

model RoutineData {
  id               String    @id @default(cuid())
  analytics        Analytics @relation(fields: [analyticsId], references: [id])
  analyticsId      String    @unique
  lastRoutineReset DateTime  @default(now())
}

model Session {
  token      String   @unique
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  validUntil DateTime @default(dbgenerated("now() + interval '7 days'"))
}

model Goal {
  id          String    @id @default(cuid()) // Unique ID for the goal
  title       String // Title of the goal
  description String // Optional description
  deadline    DateTime? // Optional deadline for the goal
  progress    Float     @default(0) // Progress percentage (0 to 100)
  createdAt   DateTime  @default(now()) // Creation timestamp
  updatedAt   DateTime  @updatedAt // Auto-updated when modified
  userId      String // Relation field to User
  user        User      @relation(fields: [userId], references: [id])
  projects    Project[] // One goal can have multiple projects
}

model Project {
  id          String     @id @default(cuid()) // Unique ID for the project
  title       String // Title of the project
  description String // Optional description
  deadline    DateTime // Optional deadline for the project
  progress    Float      @default(0) // Progress percentage (0 to 100)
  createdAt   DateTime   @default(now()) // Creation timestamp
  updatedAt   DateTime   @updatedAt // Auto-updated when modified
  goalId      String // Relation field to Goal
  goal        Goal       @relation(fields: [goalId], references: [id])
  todoLists   ToDoList[] // One project can have multiple to-do lists
}

model ToDoList {
  id        String   @id @default(cuid()) // Unique ID for the to-do list
  title     String // Title of the to-do list
  createdAt DateTime @default(now()) // Creation timestamp
  updatedAt DateTime @updatedAt // Auto-updated when modified
  projectId String // Relation field to Project
  project   Project  @relation(fields: [projectId], references: [id])
  tasks     Task[] // One to-do list can have multiple tasks
}

enum TaskType {
  ROUTINE
  TODOLIST
}

model Task {
  id          String    @id @default(cuid()) // Unique ID for the task
  taskType    TaskType // Specifies the owner type (User or ToDoList)
  priority    Int       @default(0) // Allows for custom ordering
  title       String // Title of the task
  description String?
  isCompleted Boolean   @default(false) // Task completion status
  createdAt   DateTime  @default(now()) // Creation timestamp
  updatedAt   DateTime  @updatedAt // Auto-updated when modified
  deadline    DateTime?
  todoListId  String? // Relation field to ToDoList
  todoList    ToDoList? @relation(fields: [todoListId], references: [id], onDelete: Cascade) // Cascade delete here
  userId      String? // Relation field to ToDoList
  user        User?     @relation(fields: [userId], references: [id])
  tags        Tag[]     @relation("TaskTags")
}

model Tag {
  id    String @id @default(cuid()) // Unique ID for the tag
  name  String // Name of the tag
  color String // Color of the tag
  tasks Task[] @relation("TaskTags")
}

// model DailyTask {
//   id          String  @id @default(cuid()) // Unique ID for the task
//   title       String // Title of the task
//   description String?
//   isCompleted Boolean @default(false)
//   userId      String // Relation field to ToDoList
//   user        User    @relation(fields: [userId], references: [id])
// }
