// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @unique @default(cuid())
  email      String     @unique
  name       String
  picture    String
  createdAt  DateTime   @default(now())
  lastSeenAt DateTime   @default(now())
  timeZone   String
  sessions   Session[]
  routine    Task[]
  tags       Tag[]
  analytics  Analytics?
}

model Session {
  token      String   @unique
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  validUntil DateTime @default(dbgenerated("now() + interval '7 days'"))
}

model Analytics {
  id          String       @id @default(cuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @unique
  routineData RoutineData? @relation
}

model RoutineData {
  id               String    @id @default(cuid())
  analytics        Analytics @relation(fields: [analyticsId], references: [id])
  analyticsId      String    @unique
  lastRoutineReset DateTime  @default(now())
}

enum TaskType {
  ROUTINE
  TODOLIST
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  OPTIONAL
}

model Task {
  id          String    @id @default(cuid())
  position    Int
  taskType    TaskType
  priority    Priority?
  title       String
  content     Json
  isCompleted Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deadline    DateTime?
  // todoListId  String? // Relation field to ToDoList
  // todoList    ToDoList? @relation(fields: [todoListId], references: [id], onDelete: Cascade) // Cascade delete here
  userId      String? // Relation field to ToDoList
  user        User?     @relation(fields: [userId], references: [id])
  tags        Tag[]     @relation("TaskTags")

  // @@unique([todoListId, position])
  @@unique([userId, position])
}

model Tag {
  id     String  @id @default(cuid())
  name   String
  color  String
  tasks  Task[]  @relation("TaskTags")
  userId String?
  user   User?   @relation(fields: [userId], references: [id])
}
